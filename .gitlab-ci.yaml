stages:
  - login
  - build-and-push

variables:
  IMAGE_NAME: your-ecr-repo.amazonaws.com/your-image-name

login_to_aws:
  stage: login
  image: amazon/aws-cli:2.x
  script:
    # Assuming AWS_* environment variables are set for credentials and region
    - aws eks get-token --cluster-name your-cluster-name --region your-region > /tmp/token
    - aws sts assume-role-with-web-identity --role-arn your-role-arn --role-session-name gitlab-ci --web-identity-token file:///tmp/token --region your-region
    - eval $(aws ecr get-login --no-include-email --region your-region)

build_and_push_to_ecr:
  stage: build-and-push
  image: docker:19.03.12
  dependencies:
    - login_to_aws
  before_script:
    - docker login -u AWS -p $AWS_SECRET_ACCESS_KEY $AWS_ECR_REGISTRY
  script:
    # Build the Docker image
    - docker build --build-arg NEXTAUTH_SECRET=$NEXTAUTH_SECRET --build-arg NEXTAUTH_URL=$NEXTAUTH_URL --build-arg GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID --build-arg GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET --build-arg DATABASE_URL=$DATABASE_URL --build-arg OPENAI_API_KEY=$OPENAI_API_KEY --build-arg REDIS_URL=$REDIS_URL --build-arg REDIS_SECRET=$REDIS_SECRET -t $IMAGE_NAME .
    # Push the Docker image to ECR
    - docker push $IMAGE_NAME
